(dp1
S'output'
p2
S''
sS'layer'
p3
S'C:\\Bin\\web2py\\applications\\sahana/controllers/gis.py'
p4
sS'code'
p5
S'# Login\ndef login():\n\tresponse.view=\'login.html\'\n\treturn dict(form=t2.login())\ndef logout(): t2.logout(next=\'login\')\ndef register():\n\tresponse.view=\'register.html\'\n\treturn dict(form=t2.register())\ndef profile(): t2.profile()\n# Enable downloading of Markers & other Files\ndef download(): return t2.download()\n\ndef index():\n    # Page Title\n    title=db(db.module.name==\'gis\').select()[0].name_nice\n\t#title=T(\'Situation Awareness\')\n    # List Modules (from which to build Menu of Modules)\n    modules=db(db.module.enabled==\'Yes\').select(db.module.ALL,orderby=db.module.menu_priority)\n    # List Options (from which to build Menu for this Module)\n    options=db(db.gis_menu_option.enabled==\'True\').select(db.gis_menu_option.ALL,orderby=db.gis_menu_option.priority)\n    return dict(title=title,modules=modules,options=options)\n\n# Select Option\ndef open():\n    id=request.vars.id\n    options=db(db.gis_menu_option.id==id).select()\n    if not len(options):\n        redirect(URL(r=request,f=\'index\'))\n    option=options[0].name\n    _option=option.replace(\' \',\'_\')\n    option=_option.lower()\n    redirect(URL(r=request,f=option))\n\n# Map Service Catalogue\ndef map_service_catalogue():\n\t# Page Title\n\ttitle=T(\'Map Service Catalogue\')\n\t# List Modules (from which to build Menu of Modules)\n\tmodules=db(db.module.enabled==\'Yes\').select(db.module.ALL,orderby=db.module.menu_priority)\n\t# List Options (from which to build Menu for this Module)\n\toptions=db(db.gis_menu_option.enabled==\'True\').select(db.gis_menu_option.ALL,orderby=db.gis_menu_option.priority)\n    \n\t#layers=t2.itemize(db.gis_layer,query=\'gis_layer.id==gis_layer_openstreetmap.layer\')\n\tlayers=t2.itemize(db.gis_layer)\n\tif layers=="No data":\n\t\tlayers="No Layers currently defined."\n\t\n\t#form=t2.create(db.gis_layer)\n\t#[OPTION(x.name,_value=x.id)for x in db().select(db.gis_layer_type.ALL)]\n\t#types=[\'openstreetmap\',\'google\']\n\t# We\'ll update this list dynamically using jQuery\n\tsubtypes=[\'mapnik\',\'osmarender\']\n\tform=FORM(TABLE(TR(T("Name:"),INPUT(_type="text",_name="name")),\n\t\t\t\tTR(T("Description:"),INPUT(_type="text",_name="description")),\n\t\t\t\tTR(T("Type:"),SELECT(_type="select",_name="type",*[OPTION(x.name,_value=x.id)for x in db().select(db.gis_layer_type.ALL)])),\n\t\t\t\tTR(T("Sub-type:"),SELECT(_type="select",_name="subtype",*subtypes)),\n                TR(T("Priority:"),INPUT(_type="text",_name="priority")),\n\t\t\t\tTR(T("Enabled:"),INPUT(_type="checkbox",_name="enabled",value=True)),\n\t\t\t\tTR("",INPUT(_type="submit",_value=T("Submit")))))\n\tif form.accepts(request.vars,session):\n\t\tdb.gis_layer.insert(\n\t\t\tname=form.vars.name,\n\t\t\tdescription=form.vars.description,\n\t\t\ttype=form.vars.type,\n\t\t\tpriority=form.vars.priority,\n\t\t\tenabled=form.vars.enabled\n\t\t)\n\t\t#type=db(db.gis_layer_type.id==form.vars.type).select()[0].name\n\t\t#id=db(db.gis_layer.name==form.vars.name).select()[0].id\n\t\t#if type=="openstreetmap":\n\t\t#\tdb.gis_layer_openstreetmap.insert(\n\t\t#\t\tlayer=id,\n\t\t#\t\ttype=form.vars.subtype\n\t\t#\t)\n\t\t#if type=="google":\n\t\t#\tdb.gis_layer_google.insert(\n\t\t#\t\tlayer=id,\n\t\t#\t\ttype=form.vars.subtype\n\t\t#\t)\n\t\t#\tdb.gis_key.insert(\n\t\t#\t\tlayer=id,\n\t\t#\t\tkey=form.vars.key\n\t\t#\t)\n\t\tresponse.confirmation=T("Layer added")\n\t\t# Need to refresh the layer list using jQuery\n\telif form.errors: \n\t\tresponse.error=T("Form is invalid")\n\telse: \n\t\tresponse.notification=T("Please fill the form")\n\n\treturn dict(title=title,modules=modules,options=options,layers=layers,form=form)\n\ndef keys():\n\t# Page Title\n\ttitle=T(\'GIS Keys\')\n\t# List Modules (from which to build Menu of Modules)\n\tmodules=db(db.module.enabled==\'Yes\').select(db.module.ALL,orderby=db.module.menu_priority)\n\t# List Options (from which to build Menu for this Module)\n\toptions=db(db.gis_menu_option.enabled==\'True\').select(db.gis_menu_option.ALL,orderby=db.gis_menu_option.priority)\n    \n\tkeys=t2.itemize(db.gis_key)\n\tif keys=="No data":\n\t\tkeys="No Keys currently defined."\n\tform=t2.create(db.gis_key)\n\treturn dict(title=title,modules=modules,options=options,keys=keys,form=form)\n\t\ndef layers():\n\t# Page Title\n\ttitle=T(\'GIS Layers\')\n\t# List Modules (from which to build Menu of Modules)\n\tmodules=db(db.module.enabled==\'Yes\').select(db.module.ALL,orderby=db.module.menu_priority)\n\t# List Options (from which to build Menu for this Module)\n\toptions=db(db.gis_menu_option.enabled==\'True\').select(db.gis_menu_option.ALL,orderby=db.gis_menu_option.priority)\n    \n\tlayers=t2.itemize(db.gis_layer)\n\tif layers=="No data":\n\t\tlayers="No Layers currently defined."\n\n\t#form=t2.create(db.gis_layer)\n\tform=FORM(TABLE(TR(T("Name:"),INPUT(_type="text",_name="name")),\n\t\t\t\tTR(T("Description:"),INPUT(_type="text",_name="description")),\n\t\t\t\tTR(T("Type:"),SELECT(_type="select",_name="type",*[OPTION(x.name,_value=x.id)for x in db().select(db.gis_layer_type.ALL)])),\n\t\t\t\tTR(T("Sub-type:"),SELECT(_type="select",_name="subtype",*[OPTION("mapnik","osmarender","satellite","hybrid","terrain")])),\n                TR(T("Priority:"),INPUT(_type="text",_name="priority")),\n\t\t\t\tTR(T("Enabled:"),INPUT(_type="checkbox",_name="enabled",value=True)),\n\t\t\t\tTR("",INPUT(_type="submit",_value=T("Submit")))))\n\tif form.accepts(request.vars,session,keepvalues=True):\n\t\tdb(db.gis_layer.id==t2.id).update(\n\t\t\tname=form.vars.name,\n\t\t\tdescription=form.vars.description,\n\t\t\ttype=form.vars.type,\n\t\t\tpriority=form.vars.priority,\n\t\t\tenabled=form.vars.enabled\n\t\t)\n\t\ttype=db(db.gis_layer_type.id==form.vars.type).select()[0].name\n\t\tif type=="openstreetmap":\n\t\t\tdb(db.gis_layer_openstreetmap.layer==t2.id).update(\n\t\t\t\ttype=form.vars.subtype\n\t\t\t)\n\t\tif type=="google":\n\t\t\tdb(db.gis_layer_google.layer==t2.id).update(\n\t\t\t\ttype=form.vars.subtype\n\t\t\t)\n\t\t#\tdb.gis_key.insert(\n\t\t#\t\tkey=form.vars.key\n\t\t#\t)\n\t\tresponse.confirmation=T("Layer added")\n\telif form.errors: \n\t\tresponse.error=T("Form is invalid")\n\telse: \n\t\tresponse.notification=T("Please fill the form")\n\n\treturn dict(title=title,modules=modules,options=options,layers=layers,form=form)\n\t\n# Actions called by representations in Model\ndef display_key():\n\t# List Modules (from which to build Menu of Modules)\n\tmodules=db(db.module.enabled==\'Yes\').select(db.module.ALL,orderby=db.module.menu_priority)\n    # List Options (from which to build Menu for this Module)\n\toptions=db(db.gis_menu_option.enabled==\'True\').select(db.gis_menu_option.ALL,orderby=db.gis_menu_option.priority)\n\t\n\titem=t2.display(db.gis_key)\n\treturn dict(modules=modules,options=options,item=item)\n\n@t2.requires_login(\'login\')\ndef update_key():\n\t# List Modules (from which to build Menu of Modules)\n\tmodules=db(db.module.enabled==\'Yes\').select(db.module.ALL,orderby=db.module.menu_priority)\n    # List Options (from which to build Menu for this Module)\n\toptions=db(db.gis_menu_option.enabled==\'True\').select(db.gis_menu_option.ALL,orderby=db.gis_menu_option.priority)\n\t\n\titem=t2.update(db.gis_key)\n\treturn dict(modules=modules,options=options,item=item)\n\ndef display_layer():\n\t# List Modules (from which to build Menu of Modules)\n\tmodules=db(db.module.enabled==\'Yes\').select(db.module.ALL,orderby=db.module.menu_priority)\n    # List Options (from which to build Menu for this Module)\n\toptions=db(db.gis_menu_option.enabled==\'True\').select(db.gis_menu_option.ALL,orderby=db.gis_menu_option.priority)\n\t\n\t#db.gis_layer.displays=[\'name\',\'description\',\'type\',\'enabled\']\n\t#main=t2.display(db.gis_layer)\n\t# We want more control than T2 allows us\n\t# - type_nice\n\t# - Req fields\n\tlayer=db(db.gis_layer.id==t2.id).select()[0]\n\ttype_nice=db(db.gis_layer_type.id==layer.type).select()[0].name\n\t# !!! This should be moved to the View!!!\n\tmain=DIV(TABLE(TR(LABEL(T("Name:")),layer.name),\n\t\t\t\tTR(LABEL(T("Description:")),T(layer.description)),\n\t\t\t\tTR(LABEL(T("Type:")),type_nice),\n\t\t\t\t#TR(LABEL(T("Sub-type:")),layer.name),\n\t\t\t\t#TR(LABEL(T("Priority:")),layer.priority),\n\t\t\t\tTR(LABEL(T("Enabled:")),layer.enabled)),_class="t2-display")\n\t\n\t#type=db(db.gis_layer.id==t2.id).select()[0].type\n\t#if type==\'google\':\n\t#\ttype_display=t2.display(db.gis_layer_google,query=\'gis_layer_google.layer==id\')\n\t#elif type==\'openstreetmap\':\n\t#\ttype_display=t2.display(db.gis_layer_openstreetmap,query=\'gis_layer_openstreetmap.layer==id\')\n\t\t\n\t#return dict(modules=modules,options=options,main=main,type=type_display)\n\treturn dict(modules=modules,options=options,layer=layer,type_nice=type_nice)\n\n@t2.requires_login(\'login\')\ndef update_layer():\n    # List Modules (from which to build Menu of Modules)\n\tmodules=db(db.module.enabled==\'Yes\').select(db.module.ALL,orderby=db.module.menu_priority)\n    # List Options (from which to build Menu for this Module)\n\toptions=db(db.gis_menu_option.enabled==\'True\').select(db.gis_menu_option.ALL,orderby=db.gis_menu_option.priority)\n\t\n\t# T2 form doesn\'t handle multiple tables :/\n\t#form=t2.update(db.gis_layer)\n\t# SQLFORM not good either: http://groups.google.com/group/web2py/browse_thread/thread/292e4ed76de9889b\n\t#form=SQLFORM(db.gis_layer,fields=[\'name\',\'description\',\'type\',\'priority\',\'enabled\'])\n\t#form=form_factory(SQLField(\'type\', label=\'Type:\',requires=IS_IN_SET([\'openstreetmap\',\'google\']))) \n\t\n\t# Pull out current settings to pre-populate form with\n\tlayer=db(db.gis_layer.id==t2.id).select()[0]\n\ttypes=[\'openstreetmap\',\'google\']\n\tsubtypes=[\'mapnik\',\'osmarender\']\n\t# Build form\n\tform=FORM(TABLE(TR(T("Name:"),INPUT(_type="text",_name="name",_value=layer.name)),\n                    TR(T("Description:"),INPUT(_type="text",_name="description",_value=layer.description)),\n\t\t\t\t\t# How to get list of options & yet also set default?\n                    #[OPTION(x.name,_value=x.id)for x in db().select(db.gis_layer_type.ALL)]\n\t\t\t\t\tTR(T("Type:"),SELECT(_type="select",_name="type",*types)),\n                    TR(T("Sub-type:"),SELECT(_type="select",_name="subtype",*subtypes)),\n\t\t\t\t\tTR(T("Priority:"),INPUT(_type="text",_name="priority",_value=layer.priority)),\n\t\t\t\t\tTR(T("Enabled:"),INPUT(_type="checkbox",_name="enabled",value=layer.enabled)),\n                    TR("",INPUT(_type="submit",_value=T("Submit")))))\n\t# Add link to AJAX for hiding/unhiding rows\n\t#_onclick="ajax(\'ajaxwiki_onclick\',[\'text\'],\'html\')"\n\tif form.accepts(request.vars,session,keepvalues=True):\n\t\tdb(db.gis_layer.id==t2.id).update(\n\t\t\tname=form.vars.name,\n\t\t\tdescription=form.vars.description,\n\t\t\ttype=form.vars.type,\n\t\t\tpriority=form.vars.priority,\n\t\t\tenabled=form.vars.enabled\n\t\t)\n\t\ttype=db(db.gis_layer_type.id==form.vars.type).select()[0].name\n\t\tif type=="openstreetmap":\n\t\t\tdb(db.gis_layer_openstreetmap.layer==t2.id).update(\n\t\t\t\ttype=form.vars.subtype\n\t\t\t)\n\t\tif type=="google":\n\t\t\tdb(db.gis_layer_google.layer==t2.id).update(\n\t\t\t\ttype=form.vars.subtype\n\t\t\t)\n\t\t#\tdb.gis_key.insert(\n\t\t#\t\tkey=form.vars.key\n\t\t#\t)\n\t\tresponse.confirmation=T("Layer updated")\n\telif form.errors: \n\t\tresponse.error=T("Form is invalid")\n\telse: \n\t\tresponse.notification=T("Please fill the form")\n\n\treturn dict(modules=modules,options=options,form=form)\n\n# Map Viewing Client\ndef map_viewing_client():\n    # Page Title\n\ttitle=T(\'Map Viewing Client\')\n\t# List Modules (from which to build Menu of Modules)\n\tmodules=db(db.module.enabled==\'Yes\').select(db.module.ALL,orderby=db.module.menu_priority)\n\t# List Options (from which to build Menu for this Module)\n\toptions=db(db.gis_menu_option.enabled==\'True\').select(db.gis_menu_option.ALL,orderby=db.gis_menu_option.priority)\n    \n\t# Get Config\n\tprojection=db(db.gis_config.setting==\'projection\').select(db.gis_config.value)[0].value\n\t\n    # Get enabled Layers\n\tlayers=db(db.gis_layer.enabled==True).select(db.gis_layer.ALL,orderby=db.gis_layer.priority)\n\t\n\t# Check for enabled Google layers\n\tgoogle=0\n\tgoogle_key=""\n\tfor row in layers:\n\t\tif row.type==\'google\':\n\t\t\tgoogle=1\n\tif google==1:\n\t\t# Check for Google Key\n\t\t_google_key=db(db.gis_key.service==\'google\').select(db.gis_key.key)\n\t\tif len(_google_key):\n\t\t\tgoogle_key=_google_key[0].key\n\t\telse:\n\t\t\tresponse.flash=T(\'Please enter a Google Key if you wish to use Google Layers\')\n\t\t\tgoogle=0\n\t\t\t# Redirect to Key entry screen?\n\t\n\treturn dict(title=title,modules=modules,options=options,layers=layers,google=google,google_key=google_key,projection=projection)\n\n#def map_viewing_client_ext():\n    # Get enabled Layers\n#\tlayers=db((db.gis_layer.enabled==True)).select(db.gis_layer.ALL,orderby=db.gis_layer.name)\n    \n\t# Check for enabled Google layers\n#\tgoogle=0\n#\tgoogle_key=""\n#\tfor row in base_layers:\n#\t\tif row.type==\'google\':\n#\t\t\tgoogle=1\n#\tif google==1:\n\t\t# Check for Google Key\n#\t\t_google_key=db(db.gis_key.service==\'google\').select(db.gis_key.key)\n#\t\tif len(_google_key):\n#\t\t\tgoogle_key=_google_key[0].key\n#\t\telse:\n#\t\t\tresponse.flash=T(\'Please enter a Google Key if you wish to use Google Layers\')\n#\t\t\tgoogle=0\n\t\t\t# Redirect to Key entry screen?\n\t\n#\treturn dict(google=google,google_key=google_key)\n\n\nresponse._vars=response._caller(display_layer)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "C:\\Bin\\web2py\\gluon\\restricted.py", line 62, in restricted\n    exec ccode in environment\n  File "C:\\Bin\\web2py\\applications\\sahana/controllers/gis.py", line 318, in <module>\n  File "C:\\Bin\\web2py\\gluon\\globals.py", line 55, in <lambda>\n    self._caller=lambda f: f()\n  File "C:\\Bin\\web2py\\applications\\sahana/controllers/gis.py", line 186, in display_layer\n    layer=db(db.gis_layer.id==t2.id).select()[0]\n  File "C:\\Bin\\web2py\\gluon\\sql.py", line 1244, in __getitem__\n    raise SyntaxError, \'SQLRows: no such row\'\nSyntaxError: SQLRows: no such row\n'
p8
s.